// ShapeScript document

/// Hatch Lens Plug

//////////////////////////////////////////////////////////////////////////////

detail 90
rotate 0  0  -0.5  /// CAD mode

//////////////////////////////////////////////////////////////////////////////

/// Hatch
define HATCH_LENS_THICKNESS        6.2   /// mm
define HATCH_LENS_HOLE_DIAMETER   15.6   /// mm
/// PLUG
define PLUG_WALL_THICKNESS         2     /// mm
define PLUG_CAP_HEIGHT             1     /// mm
define PLUG_LOCK_SEGMENTS          5     /// count
define PLUG_LOCK_THICKNESS         1     /// mm
define PLUG_LOCK_SEGMENT_LENGTH   ((HATCH_LENS_THICKNESS) / 2 + PLUG_WALL_THICKNESS)  /// mm

//////////////////////////////////////////////////////////////////////////////

define HATCH_LENS_PLUG_LOCK_SPACE {
    cube {
        size ((HATCH_LENS_HOLE_DIAMETER + PLUG_LOCK_THICKNESS) / 2)  (PLUG_LOCK_SEGMENT_LENGTH)  (PLUG_WALL_THICKNESS)
        position ((HATCH_LENS_HOLE_DIAMETER + PLUG_LOCK_THICKNESS) / 4)  -((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2 - PLUG_LOCK_SEGMENT_LENGTH / 2)
    }
}

define HATCH_LENS_PLUG {
    difference {
        union {
            /// Base
            cylinder {
                size (HATCH_LENS_HOLE_DIAMETER)  (HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS)
            }

            /// Cap
            difference {
                cylinder {
                    size (HATCH_LENS_HOLE_DIAMETER + PLUG_WALL_THICKNESS * 2)  (PLUG_CAP_HEIGHT)
                    position 0  ((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2 + PLUG_CAP_HEIGHT / 2)
                }

                difference {
                    difference {
                        cylinder {
                            size (HATCH_LENS_HOLE_DIAMETER + PLUG_WALL_THICKNESS * 2)  (PLUG_CAP_HEIGHT)
                            position 0  ((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2 + PLUG_CAP_HEIGHT / 2)
                        }
                        cylinder {
                            size (HATCH_LENS_HOLE_DIAMETER + PLUG_WALL_THICKNESS * 2 - PLUG_CAP_HEIGHT * 2)  (PLUG_CAP_HEIGHT)
                            position 0  ((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2 + PLUG_CAP_HEIGHT / 2)
                        }
                    }
                    extrude {
                        circle {
                            size (PLUG_CAP_HEIGHT * 2)
                        }
                        along circle {
                            orientation 0  0  0.5
                            size (HATCH_LENS_HOLE_DIAMETER + PLUG_WALL_THICKNESS * 2 - PLUG_CAP_HEIGHT * 2)
                            position 0  ((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2)
                        }
                    }
                }
            }
            /// Material for making cap transition smooth
            cylinder {
                size (HATCH_LENS_HOLE_DIAMETER + PLUG_WALL_THICKNESS)  (PLUG_WALL_THICKNESS / 2)
                position 0  ((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2 - PLUG_WALL_THICKNESS / 4)
            }

            /// Locks
            lathe path {
                point 0  PLUG_WALL_THICKNESS
                point ((HATCH_LENS_HOLE_DIAMETER + PLUG_LOCK_THICKNESS) / 2)  PLUG_WALL_THICKNESS
                point (HATCH_LENS_HOLE_DIAMETER / 2)  0
                point 0  0

                position 0  -((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2)
            }
            /// Material for making locks transition smooth
            cylinder {
                size (HATCH_LENS_HOLE_DIAMETER + PLUG_LOCK_THICKNESS)  (PLUG_WALL_THICKNESS / 2)
                position 0  -((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2 - PLUG_WALL_THICKNESS * 1.25)
            }
        }

        /// Center
        cylinder {
            size (HATCH_LENS_HOLE_DIAMETER - PLUG_WALL_THICKNESS * 2)  (HATCH_LENS_THICKNESS)
            position 0  -(PLUG_WALL_THICKNESS / 2)
        }

        /// Lock segments
        for i in 1 to PLUG_LOCK_SEGMENTS {
            HATCH_LENS_PLUG_LOCK_SPACE {
                orientation 0  i * (2 / PLUG_LOCK_SEGMENTS)
            }
        }

        /// Make locks transition smooth
        extrude {
            circle {
                size (PLUG_LOCK_THICKNESS)  (PLUG_WALL_THICKNESS)
            }
            along circle {
                orientation 0  0  0.5
                size (HATCH_LENS_HOLE_DIAMETER + PLUG_LOCK_THICKNESS)
                position 0  -((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2 - PLUG_WALL_THICKNESS * 1.5)
            }
        }

        /// Make cap transition smooth
        extrude {
            circle {
                size (PLUG_WALL_THICKNESS)
            }
            along circle {
                orientation 0  0  0.5
                size (HATCH_LENS_HOLE_DIAMETER + PLUG_WALL_THICKNESS)
                position 0  ((HATCH_LENS_THICKNESS + PLUG_WALL_THICKNESS) / 2 - PLUG_WALL_THICKNESS / 2)
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////

HATCH_LENS_PLUG {
    position 0  PLUG_WALL_THICKNESS / 2
    orientation 1
}

/// Lens
difference {
    color 1  0  0
    opacity 0.1

    cube {
        size (HATCH_LENS_HOLE_DIAMETER * 3)  (HATCH_LENS_THICKNESS)  (HATCH_LENS_HOLE_DIAMETER * 3)
    }

    cylinder {
        size (HATCH_LENS_HOLE_DIAMETER)  (HATCH_LENS_THICKNESS)
    }

    size 0
}
