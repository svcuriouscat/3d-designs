// ShapeScript document

/// Hole Plug

//////////////////////////////////////////////////////////////////////////////

detail 90
rotate 0  0  -0.5  /// CAD mode

//////////////////////////////////////////////////////////////////////////////

define INCH_IN_MM                 25.399999619  /// mm
// define GAP                         0.2  /// mm

/// Hole
define HOLE_DIAMETER              {  /// mm
//    10
//    15.8
//    23
    // 50  /// Some small old marine instrument display
    90  /// Some medium-sized old marine instrument display
}
define HOLE_DEPTH                 {  /// mm
//    6
//    6.15
//    9
    34.5  /// 1-1/4" + laminate; fiberglass-foam sandwich
}

/// Plug
define PLUG_WALL_THICKNESS         2    /// mm
define PLUG_CAP_HEIGHT             1    /// mm
define PLUG_LOCK_SEGMENTS          5    /// count
define PLUG_LOCK_THICKNESS         0.6  /// mm
define PLUG_LOCK_SEGMENT_LENGTH   ((HOLE_DEPTH) / 2 + PLUG_WALL_THICKNESS)  /// mm

/// Opening
define OPENING_DIAMETER           {  /// mm (a hole within a hole)
    0  /// mm (default, no opening)
    // 18.84  /// mm (stianless steel horn push button by Sheridan Marine)
}

//////////////////////////////////////////////////////////////////////////////

define HOLE_PLUG_LOCK_SPACE {
    cube {
        size ((HOLE_DIAMETER + PLUG_LOCK_THICKNESS) / 2)  (PLUG_LOCK_SEGMENT_LENGTH)  (PLUG_WALL_THICKNESS)
        position ((HOLE_DIAMETER + PLUG_LOCK_THICKNESS) / 4)  -((HOLE_DEPTH + PLUG_WALL_THICKNESS) / 2 - PLUG_LOCK_SEGMENT_LENGTH / 2)
    }
}

define HOLE_PLUG {
    difference {
        union {
            /// Base
            cylinder {
                size (HOLE_DIAMETER)  (HOLE_DEPTH + PLUG_WALL_THICKNESS)
            }

            /// Cap
            difference {
                cylinder {
                    size (HOLE_DIAMETER + PLUG_WALL_THICKNESS * 2)  (PLUG_CAP_HEIGHT)
                    position 0  ((HOLE_DEPTH + PLUG_WALL_THICKNESS) / 2 + PLUG_CAP_HEIGHT / 2)
                }

                difference {
                    difference {
                        cylinder {
                            size (HOLE_DIAMETER + PLUG_WALL_THICKNESS * 2)  (PLUG_CAP_HEIGHT)
                            position 0  ((HOLE_DEPTH + PLUG_WALL_THICKNESS) / 2 + PLUG_CAP_HEIGHT / 2)
                        }
                        cylinder {
                            size (HOLE_DIAMETER + PLUG_WALL_THICKNESS * 2 - PLUG_CAP_HEIGHT * 2)  (PLUG_CAP_HEIGHT)
                            position 0  ((HOLE_DEPTH + PLUG_WALL_THICKNESS) / 2 + PLUG_CAP_HEIGHT / 2)
                        }
                    }
                    extrude {
                        circle {
                            size (PLUG_CAP_HEIGHT * 2)
                        }
                        along circle {
                            orientation 0  0  0.5
                            size (HOLE_DIAMETER + PLUG_WALL_THICKNESS * 2 - PLUG_CAP_HEIGHT * 2)
                            position 0  ((HOLE_DEPTH + PLUG_WALL_THICKNESS) / 2)
                        }
                    }
                }
            }

            /// Locks
            lathe path {
                point 0  PLUG_WALL_THICKNESS
                point ((HOLE_DIAMETER + PLUG_LOCK_THICKNESS) / 2)  PLUG_WALL_THICKNESS
                point (HOLE_DIAMETER / 2)  0
                point 0  0

                position 0  -((HOLE_DEPTH + PLUG_WALL_THICKNESS) / 2)
            }
            /// Material for making locks' transition smooth
            cylinder {
                size (HOLE_DIAMETER + PLUG_LOCK_THICKNESS)  (PLUG_WALL_THICKNESS / 2)
                position 0  -((HOLE_DEPTH + PLUG_WALL_THICKNESS) / 2 - PLUG_WALL_THICKNESS * 1.25)
            }
        }

        /// Center
        cylinder {
            size (HOLE_DIAMETER - PLUG_WALL_THICKNESS * 2)  (HOLE_DEPTH)
            position 0  -(PLUG_WALL_THICKNESS / 2)
        }

        /// Lock segments
        for i in 1 to PLUG_LOCK_SEGMENTS {
            HOLE_PLUG_LOCK_SPACE {
                orientation 0  i * (2 / PLUG_LOCK_SEGMENTS)
            }
        }

        /// Opening
        if OPENING_DIAMETER > 0 {
            cylinder {
                if OPENING_DIAMETER > (HOLE_DIAMETER - PLUG_WALL_THICKNESS * 2) {
                    size (HOLE_DIAMETER - PLUG_WALL_THICKNESS * 2)  (PLUG_WALL_THICKNESS * 1.5)
                } else {
                    size OPENING_DIAMETER  (PLUG_WALL_THICKNESS * 1.5)
                }
                position 0  (HOLE_DEPTH / 2 + PLUG_WALL_THICKNESS / 4)
            }
        }

        /// Make locks transition smooth
        extrude {
            circle {
                size (PLUG_LOCK_THICKNESS)  (PLUG_WALL_THICKNESS)
            }
            along circle {
                orientation 0  0  0.5
                size (HOLE_DIAMETER + PLUG_LOCK_THICKNESS)
                position 0  -((HOLE_DEPTH + PLUG_WALL_THICKNESS) / 2 - PLUG_WALL_THICKNESS * 1.5)
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////

HOLE_PLUG {
    position 0  (PLUG_WALL_THICKNESS / 2)
    orientation 1
}

/// Ghost
if not true {
    difference {
        color 1  0  0
        opacity 0.1

        cube {
            size (HOLE_DIAMETER * 3)  (HOLE_DEPTH)  (HOLE_DIAMETER * 3)
        }

        cylinder {
            size (HOLE_DIAMETER)  (HOLE_DEPTH)
        }
    }
}

//////////////////////////////////////////////////////////////////////////////

print "[MODEL] detail: " (detail)

print ""
print "[HOLE] depth: " HOLE_DEPTH "mm"
print "[HOLE] diameter: " HOLE_DIAMETER "mm"

if OPENING_DIAMETER > 0 {
    print ""
    print "[OPENING] diameter: " OPENING_DIAMETER "mm"
}
